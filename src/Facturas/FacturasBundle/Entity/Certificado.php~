<?php

namespace Facturas\FacturasBundle\Entity;

/**
 * Certificado
 */
class Certificado
{
    /**
     * @var integer
     */
    private $id;

    /**
     * @var string
     */
    private $certificado;

    /**
     * @var string
     */
    private $path;


    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set certificado
     *
     * @param string $certificado
     *
     * @return Certificado
     */
    public function setCertificado($certificado)
    {
        $this->certificado = $certificado;

        return $this;
    }

    /**
     * Get certificado
     *
     * @return string
     */
    public function getCertificado()
    {
        return $this->certificado;
    }

    /**
     * Set path
     *
     * @param string $path
     *
     * @return Certificado
     */
    public function setPath($path)
    {
        $this->path = $path;

        return $this;
    }

    /**
     * Get path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Manages the copying of the file to the relevant place on the server
     */
    public function upload($dir='Certificado')
    {
        // the file property can be empty if the field is not required
        if (null === $this->getCertificado()) {
            return false;
        }

        // we use the original file name here but you should
        // sanitize it at least to avoid any security issues

        // move takes the target directory and target filename as params
        $this->getCertificado()->move(
            $this->getUploadRootDir($dir),
            urlencode(time().$this->getCertificado()->getClientOriginalName())
        );

        // set the path property to the filename where you've saved the file
        $this->path = urlencode(time().$this->getCertificado()->getClientOriginalName());
        $this->certificado=$this->getUploadDir($dir).'/'.$this->llavePath;
        return true;
        // clean up the f$this->path = $this->getFile()->getClientOriginalName();ile property as you won't need it anymore
        //$this->setImagen(null);
    }

     /**
     * Updates the hash value to force the preUpdate and postUpdate events to fire
     */
   
    public function getAbsolutePath()
    {
        return null === $this->path
            ? null
            : $this->getUploadRootDir().'/'.$this->path;
    }

    public function getWebPath()
    {
        return null === $this->path
            ? null
            : $this->getUploadDir().'/'.$this->path;
    }

    protected function getUploadRootDir($dir='Certificado')
    {
        // the absolute directory path where uploaded
        // documents should be saved
        return __DIR__.'/../../../../web/'.$this->getUploadDir($dir);
    }

    protected function getUploadDir($dir='Certificado')
    {
        // get rid of the __DIR__ so it doesn't screw up
        // when displaying uploaded doc/image in the view.
        return 'uploads/'.$dir;
    }

   public function __toString()
   { 
     return $this->id;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $folio;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->folio = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add folio
     *
     * @param \Facturas\FacturasBundle\Entity\Folio $folio
     *
     * @return Certificado
     */
    public function addFolio(\Facturas\FacturasBundle\Entity\Folio $folio)
    {
        $this->folio[] = $folio;

        return $this;
    }

    /**
     * Remove folio
     *
     * @param \Facturas\FacturasBundle\Entity\Folio $folio
     */
    public function removeFolio(\Facturas\FacturasBundle\Entity\Folio $folio)
    {
        $this->folio->removeElement($folio);
    }

    /**
     * Get folio
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFolio()
    {
        return $this->folio;
    }
}
